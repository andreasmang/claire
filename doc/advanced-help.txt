
-----------------------------------------------------------------------------------------------------
 usage: runcoldreg [options] 
-----------------------------------------------------------------------------------------------------
 where [options] is one or more of the following
-----------------------------------------------------------------------------------------------------
 -mr <file>              reference image (*.nii, *.nii.gz, *.hdr)
 -mt <file>              template image (*.nii, *.nii.gz, *.hdr)
-----------------------------------------------------------------------------------------------------
 -x <path>               output path (what's written out is controlled by the flags below)
                         a prefix can be added by doing '-x </out/put/path/prefix_>
 -xresults               flag: write results to file (requires -x option)
 -xlog                   flag: write log files (requires -x option)
-----------------------------------------------------------------------------------------------------
 optimization specific parameters
-----------------------------------------------------------------------------------------------------
 -optmeth <type>         optimization method
                         <type> is one of the following
                             gn           Gauss-Newton (default)
                             fn           full Newton
 -grel <dbl>             tolerance for optimization (default: 1E-2)
                              relative change of gradient
                              optimization stops if ||g_k||/||g_0|| <= tol
 -gabs <dbl>             tolerance for optimization (default: 1E-6)
                              lower bound for gradient
                              optimization stops if ||g_k|| <= tol
                              tol <= ||g||/||g_init||
 -maxit <int>            maximum number of (outer) Newton iterations (default: 50)
 -krylovmaxit <int>      maximum number of (inner) Krylov iterations (default: 50)
 -krylovfseq <type>      forcing sequence for Krylov solver (tolerance for inner iterations)
                         where <types> are
                             quadratic     quadratic (default)
                             suplinear     super-linear
                             none          exact solve (expensive)
-----------------------------------------------------------------------------------------------------
 regularization/constraints
-----------------------------------------------------------------------------------------------------
 -regnorm <type>         regularization norm for velocity field
                         <type> is one of the following
                             h1s          H1-seminorm
                             h2s          H2-seminorm (default)
                             h1           H1-norm
                             h2           H2-norm
                             l2           l2-norm (discouraged)
 -betav <dbl>            regularization parameter (velocity field; default: 1E-2)
 -betaw <dbl>            regularization parameter (mass source map; default: 1E-4)
                         enable relaxed incompressibility to use this parameter ('-ric'; see below)
 -ic                     enable incompressibility constraint (det(grad(y))=1)
 -ric                    enable relaxed incompressibility (control jacobians; det(grad(y)) ~ 1)
 -train <type>           estimate regularization parameter (use 'jbound' to modify bound
                         for det(grad(y)) used during estimation)
                         <type> is one of the following
                             binary       perform binary search (recommended)
                             reduce       reduce parameter by one order until bound is breached
 -jbound <dbl>           lower bound on determinant of deformation gradient (default: 2E-1)
 -jmonitor               enable monitor for det(grad(y))
-----------------------------------------------------------------------------------------------------
 solver specific parameters (numerics)
-----------------------------------------------------------------------------------------------------
 -pdesolver <type>       numerical time integrator for transport equations
                         <type> is one of the following
                             sl           semi-Lagrangian method (default; unconditionally stable)
                             rk2          rk2 time integrator (conditionally stable)
 -nt <int>               number of time points (for time integration; default: 4)
-----------------------------------------------------------------------------------------------------
 memory distribution and parallelism
-----------------------------------------------------------------------------------------------------
 -nthreads <int>         number of threads (default: 1)
 -np <int>x<int>         distribution of mpi tasks (cartesian grid) (example: -np 2x4 results
                         results in an MPI distribution of size (nx1/2,nx2/4,nx3) for each mpi task)
-----------------------------------------------------------------------------------------------------
 other parameters
-----------------------------------------------------------------------------------------------------
 -verbosity <int>        verbosity level (ranges from 0 to 3; default: 1)
 -storeiter              store iterates
 -nx <int>x<int>x<int>   grid size (i.e., 32x64x32); control grid size for synthetic problems
                         to be uniform if a single integer is provided (i.e., for '-nx 32')
-----------------------------------------------------------------------------------------------------
 -help                   display a brief version of the user message
 -advanced               display this message
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
